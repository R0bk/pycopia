#!/usr/bin/python
# -*- coding: us-ascii -*-
# vim:ts=4:sw=4:softtabstop=4:smarttab:expandtab

"""
Add a new user to this system. Creates a system account and a web/QA framework
account with the same name. Or sync passwords.

This tool must be run as root.

newuser --first_name=First --last_name=Last [--password=newpass] <acctname>
    To add a single, new user.

OR

newuser [-S] -f newuserfile
    see `man 8 newusers` for a description of the newusers file.
    Use `-S` to skip adding a system account. Upate the database only.

OR

newuser -s
  Sync system passwords with database passwords.

"""


import sys

from pycopia import getopt
from pycopia import tty
from pycopia import passwd
from pycopia import proctools
from pycopia import expect
from pycopia import basicconfig

from pycopia.db import models

from sqlalchemy.exc import IntegrityError

GROUPS = "cron,audio,cdrom,video,games,postgres,usb,plugdev,testers"

USERADD = 'useradd -c "%s %s" -g users -G %s -m %s'
NEWUSERS = "newusers %s"
USERMOD = "usermod -G %s %s"

def newuser(argv):
    newuserfile = None
    skipsystem = False
    dosync = False
    try:
        opts, longopts, args = getopt.getopt(argv[1:], "h?f:Ss")
    except getopt.GetoptError:
        print __doc__
        return
    for opt, optarg in opts:
        if opt in ("-?", "-h"):
            print __doc__
            return
        elif opt in ("-f",):
            newuserfile = optarg
        elif opt in ("-S",):
            skipsystem = True
        elif opt in ("-s",):
            dosync = True

    cf = basicconfig.get_config("storage.conf")
    database = cf.database
    del cf

    if dosync:
        do_sync(database)
    elif newuserfile:
        add_newusers(newuserfile, database, skipsystem)
    else:
        try:
            username = args[0]
        except IndexError:
            username = raw_input("Account name? ")
        add_user(username, database, longopts)

def do_sync(database):
    dbsession = models.get_session(database)
    try:
        for user in dbsession.query(models.User).filter(models.and_(models.User.authservice=="system",
                models.User.is_staff==True, models.User.is_active==True)).all():
            change_password(user.username, user.password)
    finally:
        dbsession.close()


def change_password(username, password):
    proc = proctools.spawnpty("passwd %s" % (username,))
    exp = expect.Expect(proc)
    exp.expect("password:")
    exp.send(password + "\r")
    exp.expect("password:")
    exp.send(password + "\r")
    pwes = proc.wait()
    exp.close()
    if not pwes:
        print >>sys.stderr, "Failed to change password for %s!" % (username,)


def add_newusers(newuserfile, database, skipsystem):
    if not skipsystem:
        proc = proctools.spawnpipe(NEWUSERS % (newuserfile,))
        es = proc.wait()
        if not es:
            print es
            return
    nufo = open(newuserfile)
    dbsession = models.get_session(database)
    try:
        for line in nufo:
            try:
                pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell = line.split(":")
            except ValueError:
                continue
            # also add supplemental groups.
            proctools.spawnpipe(USERMOD % (GROUPS, pw_name))
            pwent = passwd.getpwnam(pw_name)
            try:
                user = models.create_user(dbsession, pwent)
                user.password = pw_passwd
                dbsession.commit()
            except IntegrityError: # already exists
                dbsession.rollback()
                user = models.User.get_by_username(dbsession, pw_name)
                user.password = pw_passwd
                dbsession.commit()
    finally:
        dbsession.close()
        nufo.close()


def add_user(username, database, longopts):
    try:
        pwent = passwd.getpwnam(username)
    except KeyError:
        first_name = longopts.get("first_name")
        if not first_name:
            first_name = raw_input("First Name? ")
        last_name = longopts.get("last_name")
        if not last_name:
            last_name = raw_input("Last Name? ")
        password = longopts.get("password")
        if not password:
            password = tty.getpass("Password? ")

        proc = proctools.spawnpipe(USERADD % (first_name, last_name, GROUPS, username))
        es = proc.wait()
        if es:
            change_password(username, password)
        else:
            print "Failed to add user!"
            return

    pwent = passwd.getpwnam(username)

    dbsession = models.get_session(database)
    user = models.create_user(dbsession, pwent)
    user.password = password
    dbsession.commit()



newuser(sys.argv)

