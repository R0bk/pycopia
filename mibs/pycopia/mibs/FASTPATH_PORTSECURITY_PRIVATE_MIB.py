# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Unsigned32
from RFC1213_MIB import DisplayString
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus, MacAddress
from IF_MIB import ifIndex
from LVL7_REF_MIB import fastPath

class FASTPATH_PORTSECURITY_PRIVATE_MIB(ModuleObject):
	path = '/usr/share/mibs/site/FASTPATH-PORTSECURITY-PRIVATE-MIB'
	conformance = 3
	name = 'FASTPATH-PORTSECURITY-PRIVATE-MIB'
	language = 2
	description = 'The LVL7 Private MIB for FASTPATH Port Security Feature.'

# nodes
class fastPathPortSecurity(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20])
	name = 'fastPathPortSecurity'

class agentPortSecurityGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1])
	name = 'agentPortSecurityGroup'

class agentPortSecurityTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 2])
	name = 'agentPortSecurityTraps'


# macros
# types 
# scalars 
class agentGlobalPortSecurityMode(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


# columns
class agentPortSecurityMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'disable'), Enum(1, 'forward'), Enum(2, 'discard'), Enum(3, 'discardshutdown')]


class agentPortSecurityDynamicLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class agentPortSecurityStaticLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class agentPortSecurityViolationTrapMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class agentPortSecurityStaticMACs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class agentPortSecurityLastDiscardedMAC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class agentPortSecurityMACAddressAdd(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class agentPortSecurityMACAddressRemove(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class agentPortSecurityMACAddressMove(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class agentPortSecurityDynamicVLANId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class agentPortSecurityDynamicMACAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


# rows 
class agentPortSecurityEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 2, 1])
	access = 2
	columns = {'agentPortSecurityMode': agentPortSecurityMode, 'agentPortSecurityDynamicLimit': agentPortSecurityDynamicLimit, 'agentPortSecurityStaticLimit': agentPortSecurityStaticLimit, 'agentPortSecurityViolationTrapMode': agentPortSecurityViolationTrapMode, 'agentPortSecurityStaticMACs': agentPortSecurityStaticMACs, 'agentPortSecurityLastDiscardedMAC': agentPortSecurityLastDiscardedMAC, 'agentPortSecurityMACAddressAdd': agentPortSecurityMACAddressAdd, 'agentPortSecurityMACAddressRemove': agentPortSecurityMACAddressRemove, 'agentPortSecurityMACAddressMove': agentPortSecurityMACAddressMove}


class agentPortSecurityDynamicEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, agentPortSecurityDynamicVLANId, agentPortSecurityDynamicMACAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 1, 3, 1])
	access = 2
	columns = {'agentPortSecurityDynamicVLANId': agentPortSecurityDynamicVLANId, 'agentPortSecurityDynamicMACAddress': agentPortSecurityDynamicMACAddress}


# notifications (traps) 
class agentPortSecurityViolation(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 20, 2, 1])

# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
