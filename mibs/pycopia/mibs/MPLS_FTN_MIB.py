# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import InterfaceIndexOrZero
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Unsigned32, Counter32, Counter64, experimental
from MPLS_TC_MIB import MplsTunnelIndex, MplsPortNumber, MplsFTNIndex, MplsFTNIndexOrZero
from INET_ADDRESS_MIB import InetAddressIPv4, InetAddressIPv6, InetAddressType
from SNMPv2_TC import RowStatus, StorageType, DisplayString, RowPointer, TruthValue

class MPLS_FTN_MIB(ModuleObject):
	path = '/usr/share/mibs/site/MPLS-FTN-MIB'
	conformance = 5
	name = 'MPLS-FTN-MIB'
	language = 2
	description = 'This MIB module contains managed object definitions for\nspecifying FEC to NHLFE (FTN) mappings and corresponding\nperformance for MPLS.'

# nodes
class mplsFTNMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111])
	name = 'mplsFTNMIB'

class mplsFTNNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 0])
	name = 'mplsFTNNotifications'

class mplsFTNObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1])
	name = 'mplsFTNObjects'

class mplsFTNConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 2])
	name = 'mplsFTNConformance'

class mplsFTNGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 2, 1])
	name = 'mplsFTNGroups'

class mplsFTNCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 2, 2])
	name = 'mplsFTNCompliances'


# macros
# types 
# scalars 
class mplsFTNIndexNext(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 1])
	syntaxobject = MplsFTNIndexOrZero


# columns
class mplsFTNIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 1])
	syntaxobject = MplsFTNIndex


class mplsFTNRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsFTNDescr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class mplsFTNApplied(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mplsFTNMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class mplsFTNAddrType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 6])
	syntaxobject = InetAddressType


class mplsFTNSourceIpv4AddrMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 7])
	syntaxobject = InetAddressIPv4


class mplsFTNSourceIpv6AddrMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 8])
	syntaxobject = InetAddressIPv6


class mplsFTNSourceIpv4AddrMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 9])
	syntaxobject = InetAddressIPv4


class mplsFTNSourceIpv6AddrMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 10])
	syntaxobject = InetAddressIPv6


class mplsFTNDestIpv4AddrMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 11])
	syntaxobject = InetAddressIPv4


class mplsFTNDestIpv6AddrMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 12])
	syntaxobject = InetAddressIPv6


class mplsFTNDestIpv4AddrMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 13])
	syntaxobject = InetAddressIPv4


class mplsFTNDestIpv6AddrMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 14])
	syntaxobject = InetAddressIPv6


class mplsFTNSourcePortMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 15])
	syntaxobject = MplsPortNumber


class mplsFTNSourcePortMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 16])
	syntaxobject = MplsPortNumber


class mplsFTNDestPortMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 17])
	syntaxobject = MplsPortNumber


class mplsFTNDestPortMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 18])
	syntaxobject = MplsPortNumber


class mplsFTNProtocol(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mplsFTNActionType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'drop'), Enum(2, 'redirectLsp'), Enum(3, 'redirectTunnel')]


class mplsFTNActionPointer(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class mplsFTNExpBits(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsFTNStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsFTNMapIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 3, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class mplsFTNMapPrevIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 3, 1, 2])
	syntaxobject = MplsFTNIndexOrZero


class mplsFTNMapCurrIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 3, 1, 3])
	syntaxobject = MplsFTNIndex


class mplsFTNMapRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsFTNMapStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsFTNMatchedPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mplsFTNMatchedOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mplsFTNMatchedHCPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class mplsFTNMatchedHCOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


# rows 
class mplsFTNEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsFTNIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 2, 1])
	access = 2
	rowstatus = mplsFTNRowStatus
	columns = {'mplsFTNIndex': mplsFTNIndex, 'mplsFTNRowStatus': mplsFTNRowStatus, 'mplsFTNDescr': mplsFTNDescr, 'mplsFTNApplied': mplsFTNApplied, 'mplsFTNMask': mplsFTNMask, 'mplsFTNAddrType': mplsFTNAddrType, 'mplsFTNSourceIpv4AddrMin': mplsFTNSourceIpv4AddrMin, 'mplsFTNSourceIpv6AddrMin': mplsFTNSourceIpv6AddrMin, 'mplsFTNSourceIpv4AddrMax': mplsFTNSourceIpv4AddrMax, 'mplsFTNSourceIpv6AddrMax': mplsFTNSourceIpv6AddrMax, 'mplsFTNDestIpv4AddrMin': mplsFTNDestIpv4AddrMin, 'mplsFTNDestIpv6AddrMin': mplsFTNDestIpv6AddrMin, 'mplsFTNDestIpv4AddrMax': mplsFTNDestIpv4AddrMax, 'mplsFTNDestIpv6AddrMax': mplsFTNDestIpv6AddrMax, 'mplsFTNSourcePortMin': mplsFTNSourcePortMin, 'mplsFTNSourcePortMax': mplsFTNSourcePortMax, 'mplsFTNDestPortMin': mplsFTNDestPortMin, 'mplsFTNDestPortMax': mplsFTNDestPortMax, 'mplsFTNProtocol': mplsFTNProtocol, 'mplsFTNActionType': mplsFTNActionType, 'mplsFTNActionPointer': mplsFTNActionPointer, 'mplsFTNExpBits': mplsFTNExpBits, 'mplsFTNStorageType': mplsFTNStorageType}


class mplsFTNMapEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsFTNMapIfIndex, mplsFTNMapPrevIndex, mplsFTNMapCurrIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 3, 1])
	access = 2
	rowstatus = mplsFTNMapRowStatus
	columns = {'mplsFTNMapIfIndex': mplsFTNMapIfIndex, 'mplsFTNMapPrevIndex': mplsFTNMapPrevIndex, 'mplsFTNMapCurrIndex': mplsFTNMapCurrIndex, 'mplsFTNMapRowStatus': mplsFTNMapRowStatus, 'mplsFTNMapStorageType': mplsFTNMapStorageType}


class mplsFTNPerfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsFTNMapIfIndex, mplsFTNMapCurrIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 1, 4, 1])
	access = 2
	columns = {'mplsFTNMatchedPackets': mplsFTNMatchedPackets, 'mplsFTNMatchedOctets': mplsFTNMatchedOctets, 'mplsFTNMatchedHCPackets': mplsFTNMatchedHCPackets, 'mplsFTNMatchedHCOctets': mplsFTNMatchedHCOctets}


# notifications (traps) 
# groups 
class mplsFTNRuleGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 2, 1, 1])
	group = [mplsFTNIndexNext, mplsFTNRowStatus, mplsFTNDescr, mplsFTNApplied, mplsFTNMask, mplsFTNAddrType, mplsFTNSourceIpv4AddrMin, mplsFTNSourceIpv6AddrMin, mplsFTNSourceIpv4AddrMax, mplsFTNSourceIpv6AddrMax, mplsFTNDestIpv4AddrMin, mplsFTNDestIpv6AddrMin, mplsFTNDestIpv4AddrMax, mplsFTNDestIpv6AddrMax, mplsFTNSourcePortMin, mplsFTNSourcePortMax, mplsFTNDestPortMin, mplsFTNDestPortMax, mplsFTNProtocol, mplsFTNActionType, mplsFTNActionPointer, mplsFTNExpBits, mplsFTNStorageType]

class mplsFTNMapGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 2, 1, 2])
	group = [mplsFTNMapIfIndex, mplsFTNMapPrevIndex, mplsFTNMapCurrIndex, mplsFTNMapRowStatus, mplsFTNMapStorageType]

class mplsFTNPerfGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 2, 1, 3])
	group = [mplsFTNMatchedPackets, mplsFTNMatchedOctets]

class mplsFTNHCPerfGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 111, 2, 1, 4])
	group = [mplsFTNMatchedHCPackets, mplsFTNMatchedHCOctets]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
