# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, IpAddress, Integer32, Unsigned32
from FASTPATH_QOS_MIB import fastPathQOS
from RFC1213_MIB import DisplayString
from SNMPv2_TC import RowStatus, MacAddress, TruthValue
from IF_MIB import InterfaceIndexOrZero

class FASTPATH_QOS_ACL_MIB(ModuleObject):
	path = '/usr/share/mibs/site/FASTPATH-QOS-ACL-MIB'
	conformance = 2
	name = 'FASTPATH-QOS-ACL-MIB'
	language = 2
	description = 'The MIB definitions for Quality of Service - ACL Flex package.'

# nodes
class fastPathQOSACL(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2])
	name = 'fastPathQOSACL'

class aclNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 0])
	name = 'aclNotifications'

class aclLoggingGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9])
	name = 'aclLoggingGroup'


# macros
# types 

class EtypeValue(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	ranges = Ranges(Range(1536, 65535))
	format = 'x'

# scalars 
class aclMacIndexNextFree(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclTrapRuleIndex(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclTrapRuleAction(ScalarObject):
	status = 1
	access = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'permit'), Enum(2, 'deny')]


class aclTrapRuleHitCount(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class aclTrapFlag(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


# columns
class aclIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class aclStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class aclRuleIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleAction(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'permit'), Enum(2, 'deny')]


class aclRuleProtocol(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleSrcIpAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class aclRuleSrcIpMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class aclRuleSrcL4Port(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleSrcL4PortRangeStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleSrcL4PortRangeEnd(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleDestIpAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class aclRuleDestIpMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class aclRuleDestL4Port(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleDestL4PortRangeStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleDestL4PortRangeEnd(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleIPDSCP(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleIpPrecedence(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleIpTosBits(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleIpTosMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclRuleStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class aclRuleAssignQueueId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclRuleRedirectIntf(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 20])
	syntaxobject = InterfaceIndexOrZero


class aclRuleMatchEvery(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class aclRuleMirrorIntf(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 22])
	syntaxobject = InterfaceIndexOrZero


class aclRuleLogging(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class aclMacIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclMacName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class aclMacStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class aclMacRuleIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclMacRuleAction(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'permit'), Enum(2, 'deny')]


class aclMacRuleCos(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleCos2(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleDestMacAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class aclMacRuleDestMacMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class aclMacRuleEtypeKey(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'custom'), Enum(2, 'appletalk'), Enum(3, 'arp'), Enum(4, 'ibmsna'), Enum(5, 'ipv4'), Enum(6, 'ipv6'), Enum(7, 'ipx'), Enum(8, 'mplsmcast'), Enum(9, 'mplsucast'), Enum(10, 'netbios'), Enum(11, 'novell'), Enum(12, 'pppoe'), Enum(13, 'rarp')]


class aclMacRuleEtypeValue(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 8])
	syntaxobject = EtypeValue


class aclMacRuleSrcMacAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class aclMacRuleSrcMacMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class aclMacRuleVlanId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleVlanIdRangeStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleVlanIdRangeEnd(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleVlanId2(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleVlanId2RangeStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleVlanId2RangeEnd(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class aclMacRuleAssignQueueId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclMacRuleRedirectIntf(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 19])
	syntaxobject = InterfaceIndexOrZero


class aclMacRuleMatchEvery(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class aclMacRuleMirrorIntf(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 21])
	syntaxobject = InterfaceIndexOrZero


class aclMacRuleLogging(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class aclIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 8, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclIfDirection(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'inbound'), Enum(2, 'outbound')]


class aclIfSequence(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclIfAclType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ip'), Enum(2, 'mac')]


class aclIfAclId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 8, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclIfStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 8, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class aclVlanIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclVlanAclType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ip'), Enum(2, 'mac')]


class aclVlanAclId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aclVlanDirection(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'inbound'), Enum(2, 'outbound')]


class aclVlanSequence(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class aclVlanStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class aclEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([aclIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1])
	access = 2
	rowstatus = aclStatus
	columns = {'aclIndex': aclIndex, 'aclName': aclName, 'aclStatus': aclStatus}


class aclRuleEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([aclIndex, aclRuleIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1])
	access = 2
	rowstatus = aclRuleStatus
	columns = {'aclRuleIndex': aclRuleIndex, 'aclRuleAction': aclRuleAction, 'aclRuleProtocol': aclRuleProtocol, 'aclRuleSrcIpAddress': aclRuleSrcIpAddress, 'aclRuleSrcIpMask': aclRuleSrcIpMask, 'aclRuleSrcL4Port': aclRuleSrcL4Port, 'aclRuleSrcL4PortRangeStart': aclRuleSrcL4PortRangeStart, 'aclRuleSrcL4PortRangeEnd': aclRuleSrcL4PortRangeEnd, 'aclRuleDestIpAddress': aclRuleDestIpAddress, 'aclRuleDestIpMask': aclRuleDestIpMask, 'aclRuleDestL4Port': aclRuleDestL4Port, 'aclRuleDestL4PortRangeStart': aclRuleDestL4PortRangeStart, 'aclRuleDestL4PortRangeEnd': aclRuleDestL4PortRangeEnd, 'aclRuleIPDSCP': aclRuleIPDSCP, 'aclRuleIpPrecedence': aclRuleIpPrecedence, 'aclRuleIpTosBits': aclRuleIpTosBits, 'aclRuleIpTosMask': aclRuleIpTosMask, 'aclRuleStatus': aclRuleStatus, 'aclRuleAssignQueueId': aclRuleAssignQueueId, 'aclRuleRedirectIntf': aclRuleRedirectIntf, 'aclRuleMatchEvery': aclRuleMatchEvery, 'aclRuleMirrorIntf': aclRuleMirrorIntf, 'aclRuleLogging': aclRuleLogging}


class aclMacEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([aclMacIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 6, 1])
	access = 2
	rowstatus = aclMacStatus
	columns = {'aclMacIndex': aclMacIndex, 'aclMacName': aclMacName, 'aclMacStatus': aclMacStatus}


class aclMacRuleEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([aclMacIndex, aclMacRuleIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 7, 1])
	access = 2
	rowstatus = aclMacRuleStatus
	columns = {'aclMacRuleIndex': aclMacRuleIndex, 'aclMacRuleAction': aclMacRuleAction, 'aclMacRuleCos': aclMacRuleCos, 'aclMacRuleCos2': aclMacRuleCos2, 'aclMacRuleDestMacAddr': aclMacRuleDestMacAddr, 'aclMacRuleDestMacMask': aclMacRuleDestMacMask, 'aclMacRuleEtypeKey': aclMacRuleEtypeKey, 'aclMacRuleEtypeValue': aclMacRuleEtypeValue, 'aclMacRuleSrcMacAddr': aclMacRuleSrcMacAddr, 'aclMacRuleSrcMacMask': aclMacRuleSrcMacMask, 'aclMacRuleVlanId': aclMacRuleVlanId, 'aclMacRuleVlanIdRangeStart': aclMacRuleVlanIdRangeStart, 'aclMacRuleVlanIdRangeEnd': aclMacRuleVlanIdRangeEnd, 'aclMacRuleVlanId2': aclMacRuleVlanId2, 'aclMacRuleVlanId2RangeStart': aclMacRuleVlanId2RangeStart, 'aclMacRuleVlanId2RangeEnd': aclMacRuleVlanId2RangeEnd, 'aclMacRuleStatus': aclMacRuleStatus, 'aclMacRuleAssignQueueId': aclMacRuleAssignQueueId, 'aclMacRuleRedirectIntf': aclMacRuleRedirectIntf, 'aclMacRuleMatchEvery': aclMacRuleMatchEvery, 'aclMacRuleMirrorIntf': aclMacRuleMirrorIntf, 'aclMacRuleLogging': aclMacRuleLogging}


class aclIfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([aclIfIndex, aclIfDirection, aclIfSequence, aclIfAclType, aclIfAclId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 8, 1])
	access = 2
	rowstatus = aclIfStatus
	columns = {'aclIfIndex': aclIfIndex, 'aclIfDirection': aclIfDirection, 'aclIfSequence': aclIfSequence, 'aclIfAclType': aclIfAclType, 'aclIfAclId': aclIfAclId, 'aclIfStatus': aclIfStatus}


class aclVlanEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([aclVlanIndex, aclVlanAclType, aclVlanAclId, aclVlanSequence], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10, 1])
	access = 2
	rowstatus = aclVlanStatus
	columns = {'aclVlanIndex': aclVlanIndex, 'aclVlanAclType': aclVlanAclType, 'aclVlanAclId': aclVlanAclId, 'aclVlanDirection': aclVlanDirection, 'aclVlanSequence': aclVlanSequence, 'aclVlanStatus': aclVlanStatus}


# notifications (traps) 
class aclTrapRuleLogEvent(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 0, 1])

# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
