# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Unsigned32, Integer32, IpAddress, NOTIFICATION_TYPE
from SNMPv2_TC import DisplayString, RowStatus, TEXTUAL_CONVENTION
from RFC1155_SMI import enterprises, TimeTicks

class Dell_Vendor_MIB(ModuleObject):
	path = '/usr/share/mibs/site/Dell-Vendor-MIB'
	conformance = 3
	name = 'Dell-Vendor-MIB'
	language = 2
	description = 'The private MIB module definition for the Dell PowerConnect \nDevices.  This MIB allows PowerConnect devices to be\nintegrated into Dell ITA management system.'

# nodes
class dell(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674])
	name = 'dell'

class dellLan(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895])
	name = 'dellLan'

class powerConnectVendorMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000])
	name = 'powerConnectVendorMIB'

class dellVendorMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1])
	name = 'dellVendorMIBObjects'

class hardware(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2])
	name = 'hardware'

class productIdentification(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100])
	name = 'productIdentification'

class productStatus(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110])
	name = 'productStatus'

class productStatusEnvironment(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7])
	name = 'productStatusEnvironment'

class dellVendorNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 2])
	name = 'dellVendorNotifications'

class dellVendorTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 2, 1])
	name = 'dellVendorTraps'

class dellVendorTrapsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 2, 1, 0])
	name = 'dellVendorTrapsPrefix'

class dellLanStandard(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000])
	name = 'dellLanStandard'

class dellLanCommon(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1])
	name = 'dellLanCommon'

class dellLanExtension(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2])
	name = 'dellLanExtension'


# macros
# types 

class EnvMonState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'normal'), Enum(2, 'warning'), Enum(3, 'critical'), Enum(4, 'shutdown'), Enum(5, 'notPresent'), Enum(6, 'notFunctioning')]

# scalars 
class productIdentificationDisplayName(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationDescription(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationVendor(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationVersion(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationBuildNumber(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationURL(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationDeviceNetworkName(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productStatusGlobalStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(3, 'ok'), Enum(4, 'non-critical'), Enum(5, 'critical')]


class productStatusLastGlobalStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(3, 'ok'), Enum(4, 'non-critical'), Enum(5, 'critical')]


class productStatusTimeStamp(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class productStatusGetTimeOut(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class productStatusRefreshRate(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class productStatusGeneratingTrapsFlag(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'true'), Enum(2, 'false'), Enum(3, 'disabled')]


# columns
class productIdentificationPerBoxIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 8, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class productIdentificationSerialNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationAssetTag(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationBootromVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationServiceTag(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 8, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class productIdentificationChassisServiceTag(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 8, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class envMonFanStatusIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class envMonFanStatusDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class envMonFanState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 1, 1, 3])
	syntaxobject = EnvMonState


class envMonSupplyStatusIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class envMonSupplyStatusDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class envMonSupplyState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 2, 1, 3])
	syntaxobject = EnvMonState


class envMonSupplySource(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'ac'), Enum(3, 'dc'), Enum(4, 'externalPowerSupply'), Enum(5, 'internalRedundant')]


# rows 
class productIdentificationPerUnitEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([productIdentificationPerBoxIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 100, 8, 1])
	access = 2
	columns = {'productIdentificationPerBoxIndex': productIdentificationPerBoxIndex, 'productIdentificationSerialNumber': productIdentificationSerialNumber, 'productIdentificationAssetTag': productIdentificationAssetTag, 'productIdentificationBootromVersion': productIdentificationBootromVersion, 'productIdentificationServiceTag': productIdentificationServiceTag, 'productIdentificationChassisServiceTag': productIdentificationChassisServiceTag}


class envMonFanStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([envMonFanStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 1, 1])
	access = 2
	columns = {'envMonFanStatusIndex': envMonFanStatusIndex, 'envMonFanStatusDescr': envMonFanStatusDescr, 'envMonFanState': envMonFanState}


class envMonSupplyStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([envMonSupplyStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 1, 2, 110, 7, 2, 1])
	access = 2
	columns = {'envMonSupplyStatusIndex': envMonSupplyStatusIndex, 'envMonSupplyStatusDescr': envMonSupplyStatusDescr, 'envMonSupplyState': envMonSupplyState, 'envMonSupplySource': envMonSupplySource}


# notifications (traps) 
class productStatusGlobalStatusChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 674, 10895, 3000, 2, 1, 0, 1])

# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
