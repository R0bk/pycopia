# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsmi', [dirname(__file__)])
        except ImportError:
            import _libsmi
            return _libsmi
        if fp is not None:
            try:
                _mod = imp.load_module('_libsmi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsmi = swig_import_helper()
    del swig_import_helper
else:
    import _libsmi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SMI_LIBRARY_VERSION = _libsmi.SMI_LIBRARY_VERSION
SMI_VERSION_MAJOR = _libsmi.SMI_VERSION_MAJOR
SMI_VERSION_MINOR = _libsmi.SMI_VERSION_MINOR
SMI_VERSION_PATCHLEVEL = _libsmi.SMI_VERSION_PATCHLEVEL
SMI_VERSION_STRING = _libsmi.SMI_VERSION_STRING
SMI_FLAG_NODESCR = _libsmi.SMI_FLAG_NODESCR
SMI_FLAG_VIEWALL = _libsmi.SMI_FLAG_VIEWALL
SMI_FLAG_ERRORS = _libsmi.SMI_FLAG_ERRORS
SMI_FLAG_RECURSIVE = _libsmi.SMI_FLAG_RECURSIVE
SMI_FLAG_STATS = _libsmi.SMI_FLAG_STATS
SMI_FLAG_MASK = _libsmi.SMI_FLAG_MASK
SMI_RENDER_NUMERIC = _libsmi.SMI_RENDER_NUMERIC
SMI_RENDER_NAME = _libsmi.SMI_RENDER_NAME
SMI_RENDER_QUALIFIED = _libsmi.SMI_RENDER_QUALIFIED
SMI_RENDER_FORMAT = _libsmi.SMI_RENDER_FORMAT
SMI_RENDER_PRINTABLE = _libsmi.SMI_RENDER_PRINTABLE
SMI_RENDER_UNKNOWN = _libsmi.SMI_RENDER_UNKNOWN
SMI_RENDER_ALL = _libsmi.SMI_RENDER_ALL
SMI_UNKNOWN_LABEL = _libsmi.SMI_UNKNOWN_LABEL
SMI_LANGUAGE_UNKNOWN = _libsmi.SMI_LANGUAGE_UNKNOWN
SMI_LANGUAGE_SMIV1 = _libsmi.SMI_LANGUAGE_SMIV1
SMI_LANGUAGE_SMIV2 = _libsmi.SMI_LANGUAGE_SMIV2
SMI_LANGUAGE_SMING = _libsmi.SMI_LANGUAGE_SMING
SMI_LANGUAGE_SPPI = _libsmi.SMI_LANGUAGE_SPPI
SMI_BASETYPE_UNKNOWN = _libsmi.SMI_BASETYPE_UNKNOWN
SMI_BASETYPE_INTEGER32 = _libsmi.SMI_BASETYPE_INTEGER32
SMI_BASETYPE_OCTETSTRING = _libsmi.SMI_BASETYPE_OCTETSTRING
SMI_BASETYPE_OBJECTIDENTIFIER = _libsmi.SMI_BASETYPE_OBJECTIDENTIFIER
SMI_BASETYPE_UNSIGNED32 = _libsmi.SMI_BASETYPE_UNSIGNED32
SMI_BASETYPE_INTEGER64 = _libsmi.SMI_BASETYPE_INTEGER64
SMI_BASETYPE_UNSIGNED64 = _libsmi.SMI_BASETYPE_UNSIGNED64
SMI_BASETYPE_FLOAT32 = _libsmi.SMI_BASETYPE_FLOAT32
SMI_BASETYPE_FLOAT64 = _libsmi.SMI_BASETYPE_FLOAT64
SMI_BASETYPE_FLOAT128 = _libsmi.SMI_BASETYPE_FLOAT128
SMI_BASETYPE_ENUM = _libsmi.SMI_BASETYPE_ENUM
SMI_BASETYPE_BITS = _libsmi.SMI_BASETYPE_BITS
SMI_STATUS_UNKNOWN = _libsmi.SMI_STATUS_UNKNOWN
SMI_STATUS_CURRENT = _libsmi.SMI_STATUS_CURRENT
SMI_STATUS_DEPRECATED = _libsmi.SMI_STATUS_DEPRECATED
SMI_STATUS_MANDATORY = _libsmi.SMI_STATUS_MANDATORY
SMI_STATUS_OPTIONAL = _libsmi.SMI_STATUS_OPTIONAL
SMI_STATUS_OBSOLETE = _libsmi.SMI_STATUS_OBSOLETE
SMI_ACCESS_UNKNOWN = _libsmi.SMI_ACCESS_UNKNOWN
SMI_ACCESS_NOT_IMPLEMENTED = _libsmi.SMI_ACCESS_NOT_IMPLEMENTED
SMI_ACCESS_NOT_ACCESSIBLE = _libsmi.SMI_ACCESS_NOT_ACCESSIBLE
SMI_ACCESS_NOTIFY = _libsmi.SMI_ACCESS_NOTIFY
SMI_ACCESS_READ_ONLY = _libsmi.SMI_ACCESS_READ_ONLY
SMI_ACCESS_READ_WRITE = _libsmi.SMI_ACCESS_READ_WRITE
SMI_ACCESS_INSTALL = _libsmi.SMI_ACCESS_INSTALL
SMI_ACCESS_INSTALL_NOTIFY = _libsmi.SMI_ACCESS_INSTALL_NOTIFY
SMI_ACCESS_REPORT_ONLY = _libsmi.SMI_ACCESS_REPORT_ONLY
SMI_NODEKIND_UNKNOWN = _libsmi.SMI_NODEKIND_UNKNOWN
SMI_NODEKIND_NODE = _libsmi.SMI_NODEKIND_NODE
SMI_NODEKIND_SCALAR = _libsmi.SMI_NODEKIND_SCALAR
SMI_NODEKIND_TABLE = _libsmi.SMI_NODEKIND_TABLE
SMI_NODEKIND_ROW = _libsmi.SMI_NODEKIND_ROW
SMI_NODEKIND_COLUMN = _libsmi.SMI_NODEKIND_COLUMN
SMI_NODEKIND_NOTIFICATION = _libsmi.SMI_NODEKIND_NOTIFICATION
SMI_NODEKIND_GROUP = _libsmi.SMI_NODEKIND_GROUP
SMI_NODEKIND_COMPLIANCE = _libsmi.SMI_NODEKIND_COMPLIANCE
SMI_NODEKIND_CAPABILITIES = _libsmi.SMI_NODEKIND_CAPABILITIES
SMI_NODEKIND_ANY = _libsmi.SMI_NODEKIND_ANY
SMI_DECL_UNKNOWN = _libsmi.SMI_DECL_UNKNOWN
SMI_DECL_IMPLICIT_TYPE = _libsmi.SMI_DECL_IMPLICIT_TYPE
SMI_DECL_TYPEASSIGNMENT = _libsmi.SMI_DECL_TYPEASSIGNMENT
SMI_DECL_IMPL_SEQUENCEOF = _libsmi.SMI_DECL_IMPL_SEQUENCEOF
SMI_DECL_VALUEASSIGNMENT = _libsmi.SMI_DECL_VALUEASSIGNMENT
SMI_DECL_OBJECTTYPE = _libsmi.SMI_DECL_OBJECTTYPE
SMI_DECL_OBJECTIDENTITY = _libsmi.SMI_DECL_OBJECTIDENTITY
SMI_DECL_MODULEIDENTITY = _libsmi.SMI_DECL_MODULEIDENTITY
SMI_DECL_NOTIFICATIONTYPE = _libsmi.SMI_DECL_NOTIFICATIONTYPE
SMI_DECL_TRAPTYPE = _libsmi.SMI_DECL_TRAPTYPE
SMI_DECL_OBJECTGROUP = _libsmi.SMI_DECL_OBJECTGROUP
SMI_DECL_NOTIFICATIONGROUP = _libsmi.SMI_DECL_NOTIFICATIONGROUP
SMI_DECL_MODULECOMPLIANCE = _libsmi.SMI_DECL_MODULECOMPLIANCE
SMI_DECL_AGENTCAPABILITIES = _libsmi.SMI_DECL_AGENTCAPABILITIES
SMI_DECL_TEXTUALCONVENTION = _libsmi.SMI_DECL_TEXTUALCONVENTION
SMI_DECL_MACRO = _libsmi.SMI_DECL_MACRO
SMI_DECL_COMPL_GROUP = _libsmi.SMI_DECL_COMPL_GROUP
SMI_DECL_COMPL_OBJECT = _libsmi.SMI_DECL_COMPL_OBJECT
SMI_DECL_MODULE = _libsmi.SMI_DECL_MODULE
SMI_DECL_EXTENSION = _libsmi.SMI_DECL_EXTENSION
SMI_DECL_TYPEDEF = _libsmi.SMI_DECL_TYPEDEF
SMI_DECL_NODE = _libsmi.SMI_DECL_NODE
SMI_DECL_SCALAR = _libsmi.SMI_DECL_SCALAR
SMI_DECL_TABLE = _libsmi.SMI_DECL_TABLE
SMI_DECL_ROW = _libsmi.SMI_DECL_ROW
SMI_DECL_COLUMN = _libsmi.SMI_DECL_COLUMN
SMI_DECL_NOTIFICATION = _libsmi.SMI_DECL_NOTIFICATION
SMI_DECL_GROUP = _libsmi.SMI_DECL_GROUP
SMI_DECL_COMPLIANCE = _libsmi.SMI_DECL_COMPLIANCE
SMI_INDEX_UNKNOWN = _libsmi.SMI_INDEX_UNKNOWN
SMI_INDEX_INDEX = _libsmi.SMI_INDEX_INDEX
SMI_INDEX_AUGMENT = _libsmi.SMI_INDEX_AUGMENT
SMI_INDEX_REORDER = _libsmi.SMI_INDEX_REORDER
SMI_INDEX_SPARSE = _libsmi.SMI_INDEX_SPARSE
SMI_INDEX_EXPAND = _libsmi.SMI_INDEX_EXPAND
class SmiValue(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    basetype = _swig_property(_libsmi.SmiValue_basetype_get)
    len = _swig_property(_libsmi.SmiValue_len_get)
    value = _swig_property(_libsmi.SmiValue_value_get)
SmiValue_swigregister = _libsmi.SmiValue_swigregister
SmiValue_swigregister(SmiValue)
Init = _libsmi.Init
SetErrorHandler = _libsmi.SetErrorHandler
List_FromSmiSubid = _libsmi.List_FromSmiSubid
GetNodeByOID = _libsmi.GetNodeByOID
cvar = _libsmi.cvar
smi_library_version = cvar.smi_library_version
smi_version_string = cvar.smi_version_string

class SmiValue_value(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    unsigned64 = _swig_property(_libsmi.SmiValue_value_unsigned64_get)
    integer64 = _swig_property(_libsmi.SmiValue_value_integer64_get)
    unsigned32 = _swig_property(_libsmi.SmiValue_value_unsigned32_get)
    integer32 = _swig_property(_libsmi.SmiValue_value_integer32_get)
    float32 = _swig_property(_libsmi.SmiValue_value_float32_get)
    float64 = _swig_property(_libsmi.SmiValue_value_float64_get)
    oid = _swig_property(_libsmi.SmiValue_value_oid_get)
    ptr = _swig_property(_libsmi.SmiValue_value_ptr_get)
SmiValue_value_swigregister = _libsmi.SmiValue_value_swigregister
SmiValue_value_swigregister(SmiValue_value)

class SmiNamedNumber(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    name = _swig_property(_libsmi.SmiNamedNumber_name_get)
    value = _swig_property(_libsmi.SmiNamedNumber_value_get)
SmiNamedNumber_swigregister = _libsmi.SmiNamedNumber_swigregister
SmiNamedNumber_swigregister(SmiNamedNumber)

class SmiRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    minValue = _swig_property(_libsmi.SmiRange_minValue_get)
    maxValue = _swig_property(_libsmi.SmiRange_maxValue_get)
SmiRange_swigregister = _libsmi.SmiRange_swigregister
SmiRange_swigregister(SmiRange)

class SmiModule(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    name = _swig_property(_libsmi.SmiModule_name_get)
    path = _swig_property(_libsmi.SmiModule_path_get)
    organization = _swig_property(_libsmi.SmiModule_organization_get)
    contactinfo = _swig_property(_libsmi.SmiModule_contactinfo_get)
    description = _swig_property(_libsmi.SmiModule_description_get)
    reference = _swig_property(_libsmi.SmiModule_reference_get)
    language = _swig_property(_libsmi.SmiModule_language_get)
    conformance = _swig_property(_libsmi.SmiModule_conformance_get)
SmiModule_swigregister = _libsmi.SmiModule_swigregister
SmiModule_swigregister(SmiModule)

class SmiRevision(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    date = _swig_property(_libsmi.SmiRevision_date_get)
    description = _swig_property(_libsmi.SmiRevision_description_get)
SmiRevision_swigregister = _libsmi.SmiRevision_swigregister
SmiRevision_swigregister(SmiRevision)

class SmiImport(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    module = _swig_property(_libsmi.SmiImport_module_get)
    name = _swig_property(_libsmi.SmiImport_name_get)
SmiImport_swigregister = _libsmi.SmiImport_swigregister
SmiImport_swigregister(SmiImport)

class SmiMacro(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    name = _swig_property(_libsmi.SmiMacro_name_get)
    decl = _swig_property(_libsmi.SmiMacro_decl_get)
    status = _swig_property(_libsmi.SmiMacro_status_get)
    description = _swig_property(_libsmi.SmiMacro_description_get)
    reference = _swig_property(_libsmi.SmiMacro_reference_get)
SmiMacro_swigregister = _libsmi.SmiMacro_swigregister
SmiMacro_swigregister(SmiMacro)

class SmiType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    name = _swig_property(_libsmi.SmiType_name_get)
    basetype = _swig_property(_libsmi.SmiType_basetype_get)
    decl = _swig_property(_libsmi.SmiType_decl_get)
    format = _swig_property(_libsmi.SmiType_format_get)
    value = _swig_property(_libsmi.SmiType_value_get)
    units = _swig_property(_libsmi.SmiType_units_get)
    status = _swig_property(_libsmi.SmiType_status_get)
    description = _swig_property(_libsmi.SmiType_description_get)
    reference = _swig_property(_libsmi.SmiType_reference_get)
SmiType_swigregister = _libsmi.SmiType_swigregister
SmiType_swigregister(SmiType)

class SmiNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    name = _swig_property(_libsmi.SmiNode_name_get)
    oidlen = _swig_property(_libsmi.SmiNode_oidlen_get)
    oid = _swig_property(_libsmi.SmiNode_oid_get)
    decl = _swig_property(_libsmi.SmiNode_decl_get)
    access = _swig_property(_libsmi.SmiNode_access_get)
    status = _swig_property(_libsmi.SmiNode_status_get)
    format = _swig_property(_libsmi.SmiNode_format_get)
    value = _swig_property(_libsmi.SmiNode_value_get)
    units = _swig_property(_libsmi.SmiNode_units_get)
    description = _swig_property(_libsmi.SmiNode_description_get)
    reference = _swig_property(_libsmi.SmiNode_reference_get)
    indexkind = _swig_property(_libsmi.SmiNode_indexkind_get)
    implied = _swig_property(_libsmi.SmiNode_implied_get)
    create = _swig_property(_libsmi.SmiNode_create_get)
    nodekind = _swig_property(_libsmi.SmiNode_nodekind_get)
SmiNode_swigregister = _libsmi.SmiNode_swigregister
SmiNode_swigregister(SmiNode)

class SmiElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SmiElement_swigregister = _libsmi.SmiElement_swigregister
SmiElement_swigregister(SmiElement)

class SmiOption(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    description = _swig_property(_libsmi.SmiOption_description_get)
SmiOption_swigregister = _libsmi.SmiOption_swigregister
SmiOption_swigregister(SmiOption)

class SmiRefinement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    access = _swig_property(_libsmi.SmiRefinement_access_get)
    description = _swig_property(_libsmi.SmiRefinement_description_get)
SmiRefinement_swigregister = _libsmi.SmiRefinement_swigregister
SmiRefinement_swigregister(SmiRefinement)


def smiExit() -> "void" :
  return _libsmi.smiExit()
smiExit = _libsmi.smiExit

def smiSetErrorLevel(*args) -> "void" :
  return _libsmi.smiSetErrorLevel(*args)
smiSetErrorLevel = _libsmi.smiSetErrorLevel

def smiGetFlags() -> "int" :
  return _libsmi.smiGetFlags()
smiGetFlags = _libsmi.smiGetFlags

def smiSetFlags(*args) -> "void" :
  return _libsmi.smiSetFlags(*args)
smiSetFlags = _libsmi.smiSetFlags

def smiGetPath() -> "char *" :
  return _libsmi.smiGetPath()
smiGetPath = _libsmi.smiGetPath

def smiSetPath(*args) -> "int" :
  return _libsmi.smiSetPath(*args)
smiSetPath = _libsmi.smiSetPath

def smiSetSeverity(*args) -> "void" :
  return _libsmi.smiSetSeverity(*args)
smiSetSeverity = _libsmi.smiSetSeverity

def smiReadConfig(*args) -> "int" :
  return _libsmi.smiReadConfig(*args)
smiReadConfig = _libsmi.smiReadConfig

def smiLoadModule(*args) -> "char *" :
  return _libsmi.smiLoadModule(*args)
smiLoadModule = _libsmi.smiLoadModule

def smiIsLoaded(*args) -> "int" :
  return _libsmi.smiIsLoaded(*args)
smiIsLoaded = _libsmi.smiIsLoaded

def smiGetModule(*args) -> "SmiModule *" :
  return _libsmi.smiGetModule(*args)
smiGetModule = _libsmi.smiGetModule

def smiGetFirstModule() -> "SmiModule *" :
  return _libsmi.smiGetFirstModule()
smiGetFirstModule = _libsmi.smiGetFirstModule

def smiGetNextModule(*args) -> "SmiModule *" :
  return _libsmi.smiGetNextModule(*args)
smiGetNextModule = _libsmi.smiGetNextModule

def smiGetModuleIdentityNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetModuleIdentityNode(*args)
smiGetModuleIdentityNode = _libsmi.smiGetModuleIdentityNode

def smiGetFirstImport(*args) -> "SmiImport *" :
  return _libsmi.smiGetFirstImport(*args)
smiGetFirstImport = _libsmi.smiGetFirstImport

def smiGetNextImport(*args) -> "SmiImport *" :
  return _libsmi.smiGetNextImport(*args)
smiGetNextImport = _libsmi.smiGetNextImport

def smiIsImported(*args) -> "int" :
  return _libsmi.smiIsImported(*args)
smiIsImported = _libsmi.smiIsImported

def smiGetFirstRevision(*args) -> "SmiRevision *" :
  return _libsmi.smiGetFirstRevision(*args)
smiGetFirstRevision = _libsmi.smiGetFirstRevision

def smiGetNextRevision(*args) -> "SmiRevision *" :
  return _libsmi.smiGetNextRevision(*args)
smiGetNextRevision = _libsmi.smiGetNextRevision

def smiGetType(*args) -> "SmiType *" :
  return _libsmi.smiGetType(*args)
smiGetType = _libsmi.smiGetType

def smiGetFirstType(*args) -> "SmiType *" :
  return _libsmi.smiGetFirstType(*args)
smiGetFirstType = _libsmi.smiGetFirstType

def smiGetNextType(*args) -> "SmiType *" :
  return _libsmi.smiGetNextType(*args)
smiGetNextType = _libsmi.smiGetNextType

def smiGetParentType(*args) -> "SmiType *" :
  return _libsmi.smiGetParentType(*args)
smiGetParentType = _libsmi.smiGetParentType

def smiGetTypeModule(*args) -> "SmiModule *" :
  return _libsmi.smiGetTypeModule(*args)
smiGetTypeModule = _libsmi.smiGetTypeModule

def smiGetTypeLine(*args) -> "int" :
  return _libsmi.smiGetTypeLine(*args)
smiGetTypeLine = _libsmi.smiGetTypeLine

def smiGetFirstRange(*args) -> "SmiRange *" :
  return _libsmi.smiGetFirstRange(*args)
smiGetFirstRange = _libsmi.smiGetFirstRange

def smiGetNextRange(*args) -> "SmiRange *" :
  return _libsmi.smiGetNextRange(*args)
smiGetNextRange = _libsmi.smiGetNextRange

def smiGetFirstNamedNumber(*args) -> "SmiNamedNumber *" :
  return _libsmi.smiGetFirstNamedNumber(*args)
smiGetFirstNamedNumber = _libsmi.smiGetFirstNamedNumber

def smiGetNextNamedNumber(*args) -> "SmiNamedNumber *" :
  return _libsmi.smiGetNextNamedNumber(*args)
smiGetNextNamedNumber = _libsmi.smiGetNextNamedNumber

def smiGetMacro(*args) -> "SmiMacro *" :
  return _libsmi.smiGetMacro(*args)
smiGetMacro = _libsmi.smiGetMacro

def smiGetFirstMacro(*args) -> "SmiMacro *" :
  return _libsmi.smiGetFirstMacro(*args)
smiGetFirstMacro = _libsmi.smiGetFirstMacro

def smiGetNextMacro(*args) -> "SmiMacro *" :
  return _libsmi.smiGetNextMacro(*args)
smiGetNextMacro = _libsmi.smiGetNextMacro

def smiGetMacroModule(*args) -> "SmiModule *" :
  return _libsmi.smiGetMacroModule(*args)
smiGetMacroModule = _libsmi.smiGetMacroModule

def smiGetNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetNode(*args)
smiGetNode = _libsmi.smiGetNode

def smiGetFirstNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetFirstNode(*args)
smiGetFirstNode = _libsmi.smiGetFirstNode

def smiGetNextNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetNextNode(*args)
smiGetNextNode = _libsmi.smiGetNextNode

def smiGetParentNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetParentNode(*args)
smiGetParentNode = _libsmi.smiGetParentNode

def smiGetRelatedNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetRelatedNode(*args)
smiGetRelatedNode = _libsmi.smiGetRelatedNode

def smiGetFirstChildNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetFirstChildNode(*args)
smiGetFirstChildNode = _libsmi.smiGetFirstChildNode

def smiGetNextChildNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetNextChildNode(*args)
smiGetNextChildNode = _libsmi.smiGetNextChildNode

def smiGetNodeModule(*args) -> "SmiModule *" :
  return _libsmi.smiGetNodeModule(*args)
smiGetNodeModule = _libsmi.smiGetNodeModule

def smiGetNodeType(*args) -> "SmiType *" :
  return _libsmi.smiGetNodeType(*args)
smiGetNodeType = _libsmi.smiGetNodeType

def smiGetNodeLine(*args) -> "int" :
  return _libsmi.smiGetNodeLine(*args)
smiGetNodeLine = _libsmi.smiGetNodeLine

def smiGetFirstElement(*args) -> "SmiElement *" :
  return _libsmi.smiGetFirstElement(*args)
smiGetFirstElement = _libsmi.smiGetFirstElement

def smiGetNextElement(*args) -> "SmiElement *" :
  return _libsmi.smiGetNextElement(*args)
smiGetNextElement = _libsmi.smiGetNextElement

def smiGetElementNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetElementNode(*args)
smiGetElementNode = _libsmi.smiGetElementNode

def smiGetFirstOption(*args) -> "SmiOption *" :
  return _libsmi.smiGetFirstOption(*args)
smiGetFirstOption = _libsmi.smiGetFirstOption

def smiGetNextOption(*args) -> "SmiOption *" :
  return _libsmi.smiGetNextOption(*args)
smiGetNextOption = _libsmi.smiGetNextOption

def smiGetOptionNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetOptionNode(*args)
smiGetOptionNode = _libsmi.smiGetOptionNode

def smiGetFirstRefinement(*args) -> "SmiRefinement *" :
  return _libsmi.smiGetFirstRefinement(*args)
smiGetFirstRefinement = _libsmi.smiGetFirstRefinement

def smiGetNextRefinement(*args) -> "SmiRefinement *" :
  return _libsmi.smiGetNextRefinement(*args)
smiGetNextRefinement = _libsmi.smiGetNextRefinement

def smiGetRefinementNode(*args) -> "SmiNode *" :
  return _libsmi.smiGetRefinementNode(*args)
smiGetRefinementNode = _libsmi.smiGetRefinementNode

def smiGetRefinementType(*args) -> "SmiType *" :
  return _libsmi.smiGetRefinementType(*args)
smiGetRefinementType = _libsmi.smiGetRefinementType

def smiGetRefinementWriteType(*args) -> "SmiType *" :
  return _libsmi.smiGetRefinementWriteType(*args)
smiGetRefinementWriteType = _libsmi.smiGetRefinementWriteType

def smiGetRefinementLine(*args) -> "int" :
  return _libsmi.smiGetRefinementLine(*args)
smiGetRefinementLine = _libsmi.smiGetRefinementLine

def smiGetFirstUniquenessElement(*args) -> "SmiElement *" :
  return _libsmi.smiGetFirstUniquenessElement(*args)
smiGetFirstUniquenessElement = _libsmi.smiGetFirstUniquenessElement

def smiRenderOID(*args) -> "char *" :
  return _libsmi.smiRenderOID(*args)
smiRenderOID = _libsmi.smiRenderOID

def smiRenderValue(*args) -> "char *" :
  return _libsmi.smiRenderValue(*args)
smiRenderValue = _libsmi.smiRenderValue

def smiRenderNode(*args) -> "char *" :
  return _libsmi.smiRenderNode(*args)
smiRenderNode = _libsmi.smiRenderNode

def smiRenderType(*args) -> "char *" :
  return _libsmi.smiRenderType(*args)
smiRenderType = _libsmi.smiRenderType


